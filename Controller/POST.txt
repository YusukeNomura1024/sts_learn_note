@PostMapping("/complete")
	public String complete(@Validated InquiryForm inquiryForm,
			BindingResult result,
			Model model,
			RedirectAttributes redirectAttributes) {

ビュー
　渡された値を表示させる
　　一時的に表示させる場合
　　　コントローラーで@ModelAttribute というアノテーションが付いた引数は設定した変数名で呼び出せる
　　特定のリダイレクトのみ表示
　　　コントローラーでフラッシュアットリビュートなどで渡された値を@ModelAttributeで受け取れば　　　　　<h2 th:text="${complete}"></h2>というようにすれば、completeという変数が渡された時のみ表示
　オブジェクトを丸ごと受け取る
　　th:object="${}" オブジェクトのフィールドを使用したいタグ、もしくは親のタグに付ける
　　　以降はth:xxx="*{xx}"とすることで、objectのxxというフィールドを取り出せる
　フォームに値を渡す
　　th:value th:fieldなど値の状況により使い分ける。
　フォーム後の確認ページ
　　入力後確認用ページでも、type="hidden"を使って、値を渡していく必要がある
　　　確認表示用にth:text=で表示をさせて、それとは別に、input type="hidden" th:value="xxx"

　フォームエリア
　　送る範囲をformタグで囲む
　　　method="post" actionはドメインが変わることもあるので、"#"としておく
　　　th:actionで@{/survey/comfirm}としておくと@はドメインの意味となる
　　int型でデータを送る場合はtype="number"とした方がいい
　　
　　ラジオボタン
　　　<label for="satisfaction">満足度:</label>
	<input type="radio" name="satisfaction" value="1" th:checked="*{satisfaction == 1}">1
	<input type="radio" name="satisfaction" value="2" th:checked="*{satisfaction == 2}">2
	<input type="radio" name="satisfaction" value="3" th:checked="*{satisfaction == 3}">3
	<input type="radio" name="satisfaction" value="4" th:checked="*{satisfaction == 4}">4
	<input type="radio" name="satisfaction" value="5" th:checked="*{satisfaction == 5}">5<br>
　　　一致するフォーム名はすべて揃えて、戻ってきたときに、選択した値が自動で選ばれるように
　　　satisfactionが1であれば1のチェックボックスのcheckedがtrueになりそれ以外はfalseになる
　　　　初めて入力フォームに来たときは、空白なので、チェックはついていない
　　エラー表示
　　　th:if="${#fields.hasErrors('エラーを表示させたいフィールド名')}" th:errors="*{エラーを表示させたいフィールド名}"
      とすることで、そのフィールドにあったエラーを表示できる。
　　　　#fieldsにはそのフォームに関する情報が入っており、hasErrorsと引数でエラーの有無を確認
　　　　th:ifとすることで、エラーがあればそのエラー文を表示できる。
　　　　<div th:if="${#fields.hasErrors('age')}" th:errors="*{age}"></div>

コントローラー
　@Controllerをクラスの上に付ける
　@RequestMapping("パス")をクラスの上につける

　リクエストに反応させる
　　@GetMapping("/form")とすることで、メソッドGETの時に、クラスに付けられたRequestMappingのパスの下の階層を指定
　　@PostMapping("/form"）とすることで、メソッドがPOSTの時に起動する
　値を渡す
　　ページのタイトルを状況によって変えたい場合
　　　model.addAttribute("title", "渡したい文字列")というようにtitleという変数に文字列を書くのして渡す
　　
　　メソッドの引数にForm系のクラスを渡すすることで、ビューにフォームのデータが渡される
　
　値を受け取る
　　コントローラーの別のメソッドからリダイレクトされた時など
　　model.addAttributeなどで変数が作成されていた時は、コントローラーで受け取れる
　　@ModelAttribute("complete") String complete
    　このように、completeという変数に格納されているデータをここでは、String型のcompleteという変数に入れなおして渡しています。




　バリデーション
　　@Validatedアノテーションを受け取ったFormクラスに設定する
　　BindingResult型の引数を追加することで、Validatedの検証をする
　　バリデーションエラー時は現在のページにとどまるようにする。
　　　if(result.hasErrors())でresultにえらがあれば検知できる
　　　現在のページにとどまるときも、現在のページを再び表示するためのmodelを渡す
    フォームが送信されるときだけでなく、確認用ページでhiddenとしているときもバリデーションは必要
　　

　保存
　　二重保存を防ぐためにRedirectAttributesクラスを引数に加える　フラッシュスコープの活用
　　RedirectAttributes redirectAttributes
　　　フラッシュのため、modelにaddAttしても、保存されないので、
　　　そのために、redirectAttributesにデータを渡すことになる
　　　redirectAttributes.addFlashAttribute("", "");という記述になる
　　　　正確に言うとセッションにデータが書くのされている形となる
　　　　セッションは一度読み込まれた時点でデータは破棄されるので、2重登録を防げる
　　　　　redirect:を使って、フォーム送信したら、リダイレクトすることで回避できる

　ページの遷移
　　return "パス"文字列を返すことで、そのパスにあったテンプレートを表示させる
　　
　　リダイレクトさせる場合
　　　バリデーションエラー時、2重登録回避などの時につかう
　　　return "redirect:/xxxxx/"とする
　　　　このredirect:とすることで、テンプレートファイル名を指すのではなく、URL名を指すことになります

フォーム
　値を一つずつやり取りするのではなく、インプットエリアに入力されたデータを一括でやり取りする
　それぞれインプットエリアなどに対応したフィールド名を持っているので名前注意
　<input id="name" name="name" type="text" th:value="*{name}">
  　このinputタグのnameプロパティの名前と、formクラスのフィールド名が一致するものが結びつけられるので、この名前が違えば値を渡せないので注意する。

　複数のデータを一括で処理する場合は
　　Listのフィールドを持つformを作ってそのそのフォームの中に複数入れたいフォームを格納する
　

コントローラーアドバイス
@ControllerAdviceをつけたクラスはコントローラー実行時に処理される
　@InitBinder
　　をつけることで、初期設定ができる
　　　nullだった場合はから文字として処理してくださいという指示もできる
